-less_noise = TRUE
-Org.where.not(parent_id: nil).each do |org|
  -score = 0; users_count = 0; notebooks_count = 0; groups_count = 0; views = 0; runs = 0; stars = 0; share_count = 0; downloads = 0;
  -users = User.where(org: org.name)
  -users_count = users.count
  -users.each do |user|
    -notebooks = Notebook.where(owner_type: "User", owner_id: user.id)
    -notebooks_count += notebooks.count
    -notebooks.each do |notebook|
      -views += NotebookSummary.find(notebook.id).unique_views
      -runs += NotebookSummary.find(notebook.id).unique_runs
      -stars += NotebookSummary.find(notebook.id).stars
      -downloads += NotebookSummary.find(notebook.id).unique_downloads
      -#share_count += Share.where(notebook_id: notebook.id).count
    -groups = GroupMembership.where(user_id: user.id, owner: 1)
    -groups_count = groups.count
    -groups.each do |group|
      -notebooks = Notebook.where(owner_type: "Group", owner_id: group.id)
      -notebooks_count += notebooks.count
      -notebooks.each do |notebook|
        -views += NotebookSummary.find(notebook.id).unique_views
        -runs += NotebookSummary.find(notebook.id).unique_runs
        -stars += NotebookSummary.find(notebook.id).stars
        -downloads += NotebookSummary.find(notebook.id).unique_downloads
        -#share_count += Share.where(notebook_id: notebook.id).count
  -org.score = (runs * 10) + views
  -org.users = users_count
  -org.notebooks = notebooks_count
  -org.groups = groups_count
  -org.notebook_views = views
  -org.notebook_runs = runs
  -org.notebook_stars = stars
  -org.notebook_shares = share_count
  -org.notebook_downloads = downloads
  -org.save!

// get array of all ids of direct children of ALL
// for each direct child of ALL, calculate sums
// while org is at an endpoint (no org exists with parent_id equal to its id)
// for each child of array, find all subchildren and sum the things, setting array equal to that new level of elements.
-parents = Org.where(parent_id: @org.id)



-# Add values to parent element if not the All Orgs
-# Won't work this way because rows could be manually uploaded out of order or edited with parents at the bottom/old ends
-#parent_org = Org.find(org.parent_id)
-#while parent_org.parent_id != nil
-#parent_org.score += (org.notebook_runs * 10) + org.notebook_views
-#parent_org.users += org.users
-#parent_org.notebooks += org.notebooks
-#parent_org.groups += org.groups
-#parent_org.notebook_views += org.notebook_views
-#parent_org.notebook_runs += org.notebook_runs
-#parent_org.notebook_stars += org.notebook_stars
-#parent_org.notebook_shares += org.notebook_shares
-#parent_org.notebook_downloads += org.notebook_downloads
-#org = parent_org
-#parent_org = Org.find(parent_org.parent_id)


-parented_orgs = Org.where.not(parent_id: nil)
-@org.users = parented_orgs.sum(:users)
-@org.notebooks = parented_orgs.sum(:notebooks)
-@org.groups = parented_orgs.sum(:groups)
-@org.notebook_views = parented_orgs.sum(:notebook_views)
-@org.notebook_runs = parented_orgs.sum(:notebook_runs)
-@org.notebook_stars = parented_orgs.sum(:notebook_stars)
-@org.notebook_shares = parented_orgs.sum(:notebook_shares)
-@org.notebook_downloads = parented_orgs.sum(:notebook_downloads)
-@org.save!

-no_orgs = false
-top_orgs = Org.where.not(parent_id: nil).order(:score).reverse_order
-if (Org.count == 2 && Org.last.name == "Unknown") || top_orgs.count < 1
  -no_orgs = true
div.content-container.mobile-expanding
  div.carousel-inner
    div.item.active
      ==image_tag("nbgallery_banner.png", aria: {"hidden": true}, class:"show", style:"display: none")
      div.content-container
        div.carousel-caption
          h1
            span All Orgs
          ==render partial: "org_headline"
div.content-container
  div
    div.org-stats.flex
      div.org-stats-by-org
        h2 Top Orgs
        -if no_orgs
          strong No orgs found
        -else
          ol
            -top_orgs = Org.where.not(parent_id: nil).order(:score).reverse_order
            -top_orgs.first(5).each do |org|
              -if org.notebook_views > 0
                li
                  a href="#{org_path(org)}" #{org.name}
                  -if !less_noise
                    span.hidden aria-hidden="true" #{" | "}
                    span.tooltips title="Contains #{org.notebooks} notebooks"
                      span.fa.fa-book.action-icon.view-summary
                      span.sr-only
                        ' Notebooks
                      span.hidden aria-hidden="true" #{"("}
                      span.badge.badge-notify #{org.notebooks}
                      span.hidden aria-hidden="true" #{")"}
                    span.hidden aria-hidden="true" #{" | "}
                    span.tooltips title="Contains #{org.users} users"
                      span.fa.fa-user.action-icon.view-summary
                      span.sr-only
                        ' Users
                      span.hidden aria-hidden="true" #{"("}
                      span.badge.badge-notify #{org.users}
                      span.hidden aria-hidden="true" #{")"}
                    -if org.groups > 0
                      span.hidden aria-hidden="true" #{" | "}
                      span.tooltips title="Contains #{org.groups} group where org' users have full or split ownership"
                        span.fa.fa-users.action-icon.view-summary
                        span.sr-only
                          ' Groups
                        span.hidden aria-hidden="true" #{"("}
                        span.badge.badge-notify #{org.groups}
                        span.hidden aria-hidden="true" #{")"}
                  -if org.notebook_stars > 0
                    span.hidden aria-hidden="true" #{" | "}
                    span.tooltips title="This org's notebooks collectively have been starred #{org.notebook_stars} times"
                      span.glyphicon.glyphicon-star-empty.action-icon.view-summary
                      span.sr-only
                        ' Stars
                      span.hidden aria-hidden="true" #{"("}
                      span.badge.badge-notify #{org.notebook_stars}
                      span.hidden aria-hidden="true" #{")"}
                  span.hidden aria-hidden="true" #{" | "}
                  span.tooltips title="This org's notebooks collectively has been viewed #{org.notebook_views} unique times"
                    span.glyphicon.glyphicon-eye-open.action-icon.view-summary
                    span.sr-only
                      ' Views
                    span.hidden aria-hidden="true" #{"("}
                    span.badge.badge-notify #{org.notebook_views}
                    span.hidden aria-hidden="true" #{")"}
                  -if org.notebook_runs > 0
                    span.hidden aria-hidden="true" #{" | "}
                    span.tooltips title="This org's notebooks collectively have been run #{org.notebook_runs} unique times"
                      span.glyphicon.glyphicon-play-circle.action-icon.view-summary
                      span.sr-only
                        ' Runs
                      span.hidden aria-hidden="true" #{"("}
                      span.badge.badge-notify #{org.notebook_runs}
                      span.hidden aria-hidden="true" #{")"}
                  -if org.notebook_downloads > 0
                    span.hidden aria-hidden="true" #{" | "}
                    span.tooltips title="This org's notebooks collectively have been downloaded by #{org.notebook_downloads} unique users"
                      span.glyphicon.glyphicon-download-alt.action-icon.view-summary
                      span.sr-only
                        ' Downloads
                      span.hidden aria-hidden="true" #{"("}
                      span.badge.badge-notify #{org.notebook_downloads}
                      span.hidden aria-hidden="true" #{")"}
      div.org-stats-by-user
        h2 Top Users
        -if no_orgs
          strong No orgs found
        -else
          ol
            -# Sort (but too lazy to do it now)
            -top_users = User.all.limit(5)
            -top_users.each do |user|
                li.org-top-user
                  i.fa.fa-user aria-hidden="true"
                  a href="#{user_path(user)}" #{user.name}
                  -unless FALSE
                    span.tooltips title="This notebook has been starred #{"2"} times"
                      span.glyphicon.glyphicon-star-empty.action-icon.view-summary
                      span.sr-only
                        ' Stars
                      span.hidden aria-hidden="true" #{"("}
                      span.badge.badge-notify 10
                      span.hidden aria-hidden="true" #{")"}
                    span.hidden aria-hidden="true" #{" | "}
                  -unless FALSE
                    span.tooltips title="This org's notebooks collectively has been viewed #{"100"} unique times"
                      span.glyphicon.glyphicon-eye-open.action-icon.view-summary
                      span.sr-only
                        ' Views
                      span.hidden aria-hidden="true" #{"("}
                      span.badge.badge-notify 10
                      span.hidden aria-hidden="true" #{")"}
                    span.hidden aria-hidden="true" #{" | "}
                  -unless FALSE
                    span.tooltips title="This org's notebooks collectively have been run #{"10"} unique times"
                      span.glyphicon.glyphicon-play-circle.action-icon.view-summary
                      span.sr-only
                        ' Runs
                      span.hidden aria-hidden="true" #{"("}
                      span.badge.badge-notify 10
                      span.hidden aria-hidden="true" #{")"}
                    span.hidden aria-hidden="true" #{" | "}
                  -unless FALSE
                    span.tooltips title="This org's notebooks collectively have been downloaded #{"5"} unique times"
                      span.glyphicon.glyphicon-download-alt.action-icon.view-summary
                      span.sr-only
                        ' Downloads
                      span.hidden aria-hidden="true" #{"("}
                      span.badge.badge-notify 10
                      span.hidden aria-hidden="true" #{")"}
                    span.hidden aria-hidden="true" #{" | "}
  ==render partial: "org_listings"
